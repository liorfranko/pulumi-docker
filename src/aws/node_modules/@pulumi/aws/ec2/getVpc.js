"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * `aws.ec2.Vpc` provides details about a specific VPC.
 *
 * This resource can prove useful when a module accepts a vpc id as
 * an input variable and needs to, for example, determine the CIDR block of that
 * VPC.
 *
 * ## Example Usage
 *
 * The following example shows how one might accept a VPC id as a variable
 * and use this data source to obtain the data necessary to create a subnet
 * within it.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const vpcId = config.require("vpcId");
 *
 * const selected = pulumi.output(aws.ec2.getVpc({
 *     id: vpcId,
 * }, { async: true }));
 * const example = new aws.ec2.Subnet("example", {
 *     availabilityZone: "us-west-2a",
 *     cidrBlock: selected.apply(selected => (() => {
 *         throw "tf2pulumi error: NYI: call to cidrsubnet";
 *         return (() => { throw "NYI: call to cidrsubnet"; })();
 *     })()),
 *     vpcId: selected.id!,
 * });
 * ```
 */
function getVpc(args, opts) {
    args = args || {};
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("aws:ec2/getVpc:getVpc", {
        "cidrBlock": args.cidrBlock,
        "default": args.default,
        "dhcpOptionsId": args.dhcpOptionsId,
        "filters": args.filters,
        "id": args.id,
        "state": args.state,
        "tags": args.tags,
    }, opts);
}
exports.getVpc = getVpc;
//# sourceMappingURL=getVpc.js.map