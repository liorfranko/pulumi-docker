import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Provides an Elastic MapReduce Cluster, a web service that makes it easy to
 * process large amounts of data efficiently. See [Amazon Elastic MapReduce Documentation](https://aws.amazon.com/documentation/elastic-mapreduce/)
 * for more information.
 *
 * To configure [Instance Groups](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for [task nodes](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-task), see the `aws.emr.InstanceGroup` resource.
 *
 * > Support for [Instance Fleets](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-fleets) will be made available in an upcoming release.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const cluster = new aws.emr.Cluster("cluster", {
 *     additionalInfo: `{
 *   "instanceAwsClientConfiguration": {
 *     "proxyPort": 8099,
 *     "proxyHost": "myproxy.example.com"
 *   }
 * }
 * `,
 *     applications: ["Spark"],
 *     bootstrapActions: [{
 *         args: [
 *             "instance.isMaster=true",
 *             "echo running on master node",
 *         ],
 *         name: "runif",
 *         path: "s3://elasticmapreduce/bootstrap-actions/run-if",
 *     }],
 *     configurationsJson: `  [
 *     {
 *       "Classification": "hadoop-env",
 *       "Configurations": [
 *         {
 *           "Classification": "export",
 *           "Properties": {
 *             "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
 *           }
 *         }
 *       ],
 *       "Properties": {}
 *     },
 *     {
 *       "Classification": "spark-env",
 *       "Configurations": [
 *         {
 *           "Classification": "export",
 *           "Properties": {
 *             "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
 *           }
 *         }
 *       ],
 *       "Properties": {}
 *     }
 *   ]
 * `,
 *     coreInstanceGroup: {
 *         autoscalingPolicy: `{
 * "Constraints": {
 *   "MinCapacity": 1,
 *   "MaxCapacity": 2
 * },
 * "Rules": [
 *   {
 *     "Name": "ScaleOutMemoryPercentage",
 *     "Description": "Scale out if YARNMemoryAvailablePercentage is less than 15",
 *     "Action": {
 *       "SimpleScalingPolicyConfiguration": {
 *         "AdjustmentType": "CHANGE_IN_CAPACITY",
 *         "ScalingAdjustment": 1,
 *         "CoolDown": 300
 *       }
 *     },
 *     "Trigger": {
 *       "CloudWatchAlarmDefinition": {
 *         "ComparisonOperator": "LESS_THAN",
 *         "EvaluationPeriods": 1,
 *         "MetricName": "YARNMemoryAvailablePercentage",
 *         "Namespace": "AWS/ElasticMapReduce",
 *         "Period": 300,
 *         "Statistic": "AVERAGE",
 *         "Threshold": 15.0,
 *         "Unit": "PERCENT"
 *       }
 *     }
 *   }
 * ]
 * }
 * `,
 *         bidPrice: "0.30",
 *         ebsConfigs: [{
 *             size: 40,
 *             type: "gp2",
 *             volumesPerInstance: 1,
 *         }],
 *         instanceCount: 1,
 *         instanceType: "c4.large",
 *     },
 *     ebsRootVolumeSize: 100,
 *     ec2Attributes: {
 *         emrManagedMasterSecurityGroup: aws_security_group_sg.id,
 *         emrManagedSlaveSecurityGroup: aws_security_group_sg.id,
 *         instanceProfile: aws_iam_instance_profile_emr_profile.arn,
 *         subnetId: aws_subnet_main.id,
 *     },
 *     keepJobFlowAliveWhenNoSteps: true,
 *     masterInstanceGroup: {
 *         instanceType: "m4.large",
 *     },
 *     releaseLabel: "emr-4.6.0",
 *     serviceRole: aws_iam_role_iam_emr_service_role.arn,
 *     tags: {
 *         env: "env",
 *         role: "rolename",
 *     },
 *     terminationProtection: false,
 * });
 * ```
 *
 * The `aws.emr.Cluster` resource typically requires two IAM roles, one for the EMR Cluster
 * to use as a service, and another to place on your Cluster Instances to interact
 * with AWS from those instances. The suggested role policy template for the EMR service is `AmazonElasticMapReduceRole`,
 * and `AmazonElasticMapReduceforEC2Role` for the EC2 profile. See the [Getting
 * Started](https://docs.aws.amazon.com/ElasticMapReduce/latest/ManagementGuide/emr-gs-launch-sample-cluster.html)
 * guide for more information on these IAM roles. There is also a fully-bootable
 * example this provider configuration at the bottom of this page.
 * ### Enable Debug Logging
 *
 * [Debug logging in EMR](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-debugging.html)
 * is implemented as a step. It is highly recommended to utilize [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) if other
 * steps are being managed outside of this provider.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.emr.Cluster("example", {
 *     steps: [{
 *         actionOnFailure: "TERMINATE_CLUSTER",
 *         hadoopJarStep: {
 *             args: ["state-pusher-script"],
 *             jar: "command-runner.jar",
 *         },
 *         name: "Setup Hadoop Debugging",
 *     }],
 * }, { ignoreChanges: ["stepConcurrencyLevel", "steps"] });
 * ```
 * ### Multiple Node Master Instance Group
 *
 * Available in EMR version 5.23.0 and later, an EMR Cluster can be launched with three master nodes for high availability. Additional information about this functionality and its requirements can be found in the [EMR Management Guide](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-ha.html).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // Map public IP on launch must be enabled for public (Internet accessible) subnets
 * const exampleSubnet = new aws.ec2.Subnet("example", {
 *     mapPublicIpOnLaunch: true,
 * });
 * const exampleCluster = new aws.emr.Cluster("example", {
 *     // core_instance_group must be configured
 *     coreInstanceGroup: {},
 *     ec2Attributes: {
 *         subnetId: exampleSubnet.id,
 *     },
 *     masterInstanceGroup: {
 *         // Master instance count must be set to 3
 *         instanceCount: 3,
 *     },
 *     // EMR version must be 5.23.0 or later
 *     releaseLabel: "emr-5.24.1",
 *     // Termination protection is automatically enabled for multiple masters
 *     // To destroy the cluster, this must be configured to false and applied first
 *     terminationProtection: true,
 * });
 * ```
 * ## Example bootable config
 *
 * **NOTE:** This configuration demonstrates a minimal configuration needed to
 * boot an example EMR Cluster. It is not meant to display best practices. Please
 * use at your own risk.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const mainVpc = new aws.ec2.Vpc("mainVpc", {
 *     cidrBlock: "168.31.0.0/16",
 *     enableDnsHostnames: true,
 *     tags: {
 *         name: "emr_test",
 *     },
 * });
 * const mainSubnet = new aws.ec2.Subnet("mainSubnet", {
 *     vpcId: mainVpc.id,
 *     cidrBlock: "168.31.0.0/20",
 *     tags: {
 *         name: "emr_test",
 *     },
 * });
 * // IAM role for EMR Service
 * const iamEmrServiceRole = new aws.iam.Role("iamEmrServiceRole", {assumeRolePolicy: `{
 *   "Version": "2008-10-17",
 *   "Statement": [
 *     {
 *       "Sid": "",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "elasticmapreduce.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `});
 * // IAM Role for EC2 Instance Profile
 * const iamEmrProfileRole = new aws.iam.Role("iamEmrProfileRole", {assumeRolePolicy: `{
 *   "Version": "2008-10-17",
 *   "Statement": [
 *     {
 *       "Sid": "",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "ec2.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `});
 * const emrProfile = new aws.iam.InstanceProfile("emrProfile", {roles: [iamEmrProfileRole.name]});
 * const cluster = new aws.emr.Cluster("cluster", {
 *     releaseLabel: "emr-4.6.0",
 *     applications: ["Spark"],
 *     ec2Attributes: {
 *         subnetId: mainSubnet.id,
 *         emrManagedMasterSecurityGroup: aws_security_group.allow_all.id,
 *         emrManagedSlaveSecurityGroup: aws_security_group.allow_all.id,
 *         instanceProfile: emrProfile.arn,
 *     },
 *     masterInstanceType: "m5.xlarge",
 *     coreInstanceType: "m5.xlarge",
 *     coreInstanceCount: 1,
 *     tags: {
 *         role: "rolename",
 *         dns_zone: "env_zone",
 *         env: "env",
 *         name: "name-env",
 *     },
 *     bootstrapActions: [{
 *         path: "s3://elasticmapreduce/bootstrap-actions/run-if",
 *         name: "runif",
 *         args: [
 *             "instance.isMaster=true",
 *             "echo running on master node",
 *         ],
 *     }],
 *     configurationsJson: `  [
 *     {
 *       "Classification": "hadoop-env",
 *       "Configurations": [
 *         {
 *           "Classification": "export",
 *           "Properties": {
 *             "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
 *           }
 *         }
 *       ],
 *       "Properties": {}
 *     },
 *     {
 *       "Classification": "spark-env",
 *       "Configurations": [
 *         {
 *           "Classification": "export",
 *           "Properties": {
 *             "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
 *           }
 *         }
 *       ],
 *       "Properties": {}
 *     }
 *   ]
 * `,
 *     serviceRole: iamEmrServiceRole.arn,
 * });
 * const allowAccess = new aws.ec2.SecurityGroup("allowAccess", {
 *     description: "Allow inbound traffic",
 *     vpcId: mainVpc.id,
 *     ingress: [{
 *         fromPort: 0,
 *         toPort: 0,
 *         protocol: "-1",
 *         cidrBlocks: mainVpc.cidrBlock,
 *     }],
 *     egress: [{
 *         fromPort: 0,
 *         toPort: 0,
 *         protocol: "-1",
 *         cidrBlocks: ["0.0.0.0/0"],
 *     }],
 *     tags: {
 *         name: "emr_test",
 *     },
 * }, {
 *     dependsOn: ["aws_subnet.main"],
 * });
 * const gw = new aws.ec2.InternetGateway("gw", {vpcId: mainVpc.id});
 * const routeTable = new aws.ec2.RouteTable("routeTable", {
 *     vpcId: mainVpc.id,
 *     routes: [{
 *         cidrBlock: "0.0.0.0/0",
 *         gatewayId: gw.id,
 *     }],
 * });
 * const mainRouteTableAssociation = new aws.ec2.MainRouteTableAssociation("mainRouteTableAssociation", {
 *     vpcId: mainVpc.id,
 *     routeTableId: routeTable.id,
 * });
 * //##
 * const iamEmrServicePolicy = new aws.iam.RolePolicy("iamEmrServicePolicy", {
 *     role: iamEmrServiceRole.id,
 *     policy: `{
 *     "Version": "2012-10-17",
 *     "Statement": [{
 *         "Effect": "Allow",
 *         "Resource": "*",
 *         "Action": [
 *             "ec2:AuthorizeSecurityGroupEgress",
 *             "ec2:AuthorizeSecurityGroupIngress",
 *             "ec2:CancelSpotInstanceRequests",
 *             "ec2:CreateNetworkInterface",
 *             "ec2:CreateSecurityGroup",
 *             "ec2:CreateTags",
 *             "ec2:DeleteNetworkInterface",
 *             "ec2:DeleteSecurityGroup",
 *             "ec2:DeleteTags",
 *             "ec2:DescribeAvailabilityZones",
 *             "ec2:DescribeAccountAttributes",
 *             "ec2:DescribeDhcpOptions",
 *             "ec2:DescribeInstanceStatus",
 *             "ec2:DescribeInstances",
 *             "ec2:DescribeKeyPairs",
 *             "ec2:DescribeNetworkAcls",
 *             "ec2:DescribeNetworkInterfaces",
 *             "ec2:DescribePrefixLists",
 *             "ec2:DescribeRouteTables",
 *             "ec2:DescribeSecurityGroups",
 *             "ec2:DescribeSpotInstanceRequests",
 *             "ec2:DescribeSpotPriceHistory",
 *             "ec2:DescribeSubnets",
 *             "ec2:DescribeVpcAttribute",
 *             "ec2:DescribeVpcEndpoints",
 *             "ec2:DescribeVpcEndpointServices",
 *             "ec2:DescribeVpcs",
 *             "ec2:DetachNetworkInterface",
 *             "ec2:ModifyImageAttribute",
 *             "ec2:ModifyInstanceAttribute",
 *             "ec2:RequestSpotInstances",
 *             "ec2:RevokeSecurityGroupEgress",
 *             "ec2:RunInstances",
 *             "ec2:TerminateInstances",
 *             "ec2:DeleteVolume",
 *             "ec2:DescribeVolumeStatus",
 *             "ec2:DescribeVolumes",
 *             "ec2:DetachVolume",
 *             "iam:GetRole",
 *             "iam:GetRolePolicy",
 *             "iam:ListInstanceProfiles",
 *             "iam:ListRolePolicies",
 *             "iam:PassRole",
 *             "s3:CreateBucket",
 *             "s3:Get*",
 *             "s3:List*",
 *             "sdb:BatchPutAttributes",
 *             "sdb:Select",
 *             "sqs:CreateQueue",
 *             "sqs:Delete*",
 *             "sqs:GetQueue*",
 *             "sqs:PurgeQueue",
 *             "sqs:ReceiveMessage"
 *         ]
 *     }]
 * }
 * `,
 * });
 * const iamEmrProfilePolicy = new aws.iam.RolePolicy("iamEmrProfilePolicy", {
 *     role: iamEmrProfileRole.id,
 *     policy: `{
 *     "Version": "2012-10-17",
 *     "Statement": [{
 *         "Effect": "Allow",
 *         "Resource": "*",
 *         "Action": [
 *             "cloudwatch:*",
 *             "dynamodb:*",
 *             "ec2:Describe*",
 *             "elasticmapreduce:Describe*",
 *             "elasticmapreduce:ListBootstrapActions",
 *             "elasticmapreduce:ListClusters",
 *             "elasticmapreduce:ListInstanceGroups",
 *             "elasticmapreduce:ListInstances",
 *             "elasticmapreduce:ListSteps",
 *             "kinesis:CreateStream",
 *             "kinesis:DeleteStream",
 *             "kinesis:DescribeStream",
 *             "kinesis:GetRecords",
 *             "kinesis:GetShardIterator",
 *             "kinesis:MergeShards",
 *             "kinesis:PutRecord",
 *             "kinesis:SplitShard",
 *             "rds:Describe*",
 *             "s3:*",
 *             "sdb:*",
 *             "sns:*",
 *             "sqs:*"
 *         ]
 *     }]
 * }
 * `,
 * });
 * ```
 */
export declare class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster;
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Cluster;
    /**
     * A JSON string for selecting additional features such as adding proxy information. Note: Currently there is no API to retrieve the value of this argument after EMR cluster creation from provider, therefore this provider cannot detect drift from the actual EMR cluster if its value is changed outside this provider.
     */
    readonly additionalInfo: pulumi.Output<string | undefined>;
    /**
     * A list of applications for the cluster. Valid values are: `Flink`, `Hadoop`, `Hive`, `Mahout`, `Pig`, `Spark`, and `JupyterHub` (as of EMR 5.14.0). Case insensitive
     */
    readonly applications: pulumi.Output<string[] | undefined>;
    readonly arn: pulumi.Output<string>;
    /**
     * An IAM role for automatic scaling policies. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
     */
    readonly autoscalingRole: pulumi.Output<string | undefined>;
    /**
     * Ordered list of bootstrap actions that will be run before Hadoop is started on the cluster nodes. Defined below.
     */
    readonly bootstrapActions: pulumi.Output<outputs.emr.ClusterBootstrapAction[] | undefined>;
    readonly clusterState: pulumi.Output<string>;
    /**
     * List of configurations supplied for the EMR cluster you are creating
     */
    readonly configurations: pulumi.Output<string | undefined>;
    /**
     * A JSON string for supplying list of configurations for the EMR cluster.
     */
    readonly configurationsJson: pulumi.Output<string | undefined>;
    /**
     * Use the `coreInstanceGroup` configuration block `instanceCount` argument instead. Number of Amazon EC2 instances used to execute the job flow. EMR will use one node as the cluster's master node and use the remainder of the nodes (`coreInstanceCount`-1) as core nodes. Cannot be specified if `coreInstanceGroup` or `instanceGroup` configuration blocks are set. Default `1`
     *
     * @deprecated use `core_instance_group` configuration block `instance_count` argument instead
     */
    readonly coreInstanceCount: pulumi.Output<number>;
    /**
     * Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [core node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-core). Cannot be specified if `coreInstanceCount` argument, `coreInstanceType` argument, or `instanceGroup` configuration blocks are set. Detailed below.
     */
    readonly coreInstanceGroup: pulumi.Output<outputs.emr.ClusterCoreInstanceGroup>;
    /**
     * Use the `coreInstanceGroup` configuration block `instanceType` argument instead. The EC2 instance type of the slave nodes. Cannot be specified if `coreInstanceGroup` or `instanceGroup` configuration blocks are set.
     *
     * @deprecated use `core_instance_group` configuration block `instance_type` argument instead
     */
    readonly coreInstanceType: pulumi.Output<string>;
    /**
     * A custom Amazon Linux AMI for the cluster (instead of an EMR-owned AMI). Available in Amazon EMR version 5.7.0 and later.
     */
    readonly customAmiId: pulumi.Output<string | undefined>;
    /**
     * Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
     */
    readonly ebsRootVolumeSize: pulumi.Output<number | undefined>;
    /**
     * Attributes for the EC2 instances running the job flow. Defined below
     */
    readonly ec2Attributes: pulumi.Output<outputs.emr.ClusterEc2Attributes | undefined>;
    /**
     * Use the `masterInstanceGroup` configuration block, `coreInstanceGroup` configuration block and `aws.emr.InstanceGroup` resource(s) instead. A list of `instanceGroup` objects for each instance group in the cluster. Exactly one of `masterInstanceType` and `instanceGroup` must be specified. If `instanceGroup` is set, then it must contain a configuration block for at least the `MASTER` instance group type (as well as any additional instance groups). Cannot be specified if `masterInstanceGroup` or `coreInstanceGroup` configuration blocks are set. Defined below
     *
     * @deprecated use `master_instance_group` configuration block, `core_instance_group` configuration block, and `aws_emr_instance_group` resource(s) instead
     */
    readonly instanceGroups: pulumi.Output<outputs.emr.ClusterInstanceGroup[]>;
    /**
     * Switch on/off run cluster with no steps or when all steps are complete (default is on)
     */
    readonly keepJobFlowAliveWhenNoSteps: pulumi.Output<boolean>;
    /**
     * Kerberos configuration for the cluster. Defined below
     */
    readonly kerberosAttributes: pulumi.Output<outputs.emr.ClusterKerberosAttributes | undefined>;
    /**
     * S3 bucket to write the log files of the job flow. If a value is not provided, logs are not created
     */
    readonly logUri: pulumi.Output<string | undefined>;
    /**
     * Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [master node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-master). Cannot be specified if `masterInstanceType` argument or `instanceGroup` configuration blocks are set. Detailed below.
     */
    readonly masterInstanceGroup: pulumi.Output<outputs.emr.ClusterMasterInstanceGroup>;
    /**
     * Use the `masterInstanceGroup` configuration block `instanceType` argument instead. The EC2 instance type of the master node. Cannot be specified if `masterInstanceGroup` or `instanceGroup` configuration blocks are set.
     *
     * @deprecated use `master_instance_group` configuration block `instance_type` argument instead
     */
    readonly masterInstanceType: pulumi.Output<string>;
    /**
     * The public DNS name of the master EC2 instance.
     * * `core_instance_group.0.id` - Core node type Instance Group ID, if using Instance Group for this node type.
     */
    readonly masterPublicDns: pulumi.Output<string>;
    /**
     * The name of the step.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The release label for the Amazon EMR release
     */
    readonly releaseLabel: pulumi.Output<string>;
    /**
     * The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an `instance group` is resized.
     */
    readonly scaleDownBehavior: pulumi.Output<string>;
    /**
     * The security configuration name to attach to the EMR cluster. Only valid for EMR clusters with `releaseLabel` 4.8.0 or greater
     */
    readonly securityConfiguration: pulumi.Output<string | undefined>;
    /**
     * IAM role that will be assumed by the Amazon EMR service to access AWS resources
     */
    readonly serviceRole: pulumi.Output<string>;
    /**
     * The number of steps that can be executed concurrently. You can specify a maximum of 256 steps. Only valid for EMR clusters with `releaseLabel` 5.28.0 or greater. (default is 1)
     */
    readonly stepConcurrencyLevel: pulumi.Output<number | undefined>;
    /**
     * List of steps to run when creating the cluster. Defined below. It is highly recommended to utilize [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) if other steps are being managed outside of this provider.
     */
    readonly steps: pulumi.Output<outputs.emr.ClusterStep[]>;
    /**
     * list of tags to apply to the EMR Cluster
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Switch on/off termination protection (default is `false`, except when using multiple master nodes). Before attempting to destroy the resource when termination protection is enabled, this configuration must be applied with its value set to `false`.
     */
    readonly terminationProtection: pulumi.Output<boolean>;
    /**
     * Whether the job flow is visible to all IAM users of the AWS account associated with the job flow. Default `true`
     */
    readonly visibleToAllUsers: pulumi.Output<boolean | undefined>;
    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * A JSON string for selecting additional features such as adding proxy information. Note: Currently there is no API to retrieve the value of this argument after EMR cluster creation from provider, therefore this provider cannot detect drift from the actual EMR cluster if its value is changed outside this provider.
     */
    readonly additionalInfo?: pulumi.Input<string>;
    /**
     * A list of applications for the cluster. Valid values are: `Flink`, `Hadoop`, `Hive`, `Mahout`, `Pig`, `Spark`, and `JupyterHub` (as of EMR 5.14.0). Case insensitive
     */
    readonly applications?: pulumi.Input<pulumi.Input<string>[]>;
    readonly arn?: pulumi.Input<string>;
    /**
     * An IAM role for automatic scaling policies. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
     */
    readonly autoscalingRole?: pulumi.Input<string>;
    /**
     * Ordered list of bootstrap actions that will be run before Hadoop is started on the cluster nodes. Defined below.
     */
    readonly bootstrapActions?: pulumi.Input<pulumi.Input<inputs.emr.ClusterBootstrapAction>[]>;
    readonly clusterState?: pulumi.Input<string>;
    /**
     * List of configurations supplied for the EMR cluster you are creating
     */
    readonly configurations?: pulumi.Input<string>;
    /**
     * A JSON string for supplying list of configurations for the EMR cluster.
     */
    readonly configurationsJson?: pulumi.Input<string>;
    /**
     * Use the `coreInstanceGroup` configuration block `instanceCount` argument instead. Number of Amazon EC2 instances used to execute the job flow. EMR will use one node as the cluster's master node and use the remainder of the nodes (`coreInstanceCount`-1) as core nodes. Cannot be specified if `coreInstanceGroup` or `instanceGroup` configuration blocks are set. Default `1`
     *
     * @deprecated use `core_instance_group` configuration block `instance_count` argument instead
     */
    readonly coreInstanceCount?: pulumi.Input<number>;
    /**
     * Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [core node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-core). Cannot be specified if `coreInstanceCount` argument, `coreInstanceType` argument, or `instanceGroup` configuration blocks are set. Detailed below.
     */
    readonly coreInstanceGroup?: pulumi.Input<inputs.emr.ClusterCoreInstanceGroup>;
    /**
     * Use the `coreInstanceGroup` configuration block `instanceType` argument instead. The EC2 instance type of the slave nodes. Cannot be specified if `coreInstanceGroup` or `instanceGroup` configuration blocks are set.
     *
     * @deprecated use `core_instance_group` configuration block `instance_type` argument instead
     */
    readonly coreInstanceType?: pulumi.Input<string>;
    /**
     * A custom Amazon Linux AMI for the cluster (instead of an EMR-owned AMI). Available in Amazon EMR version 5.7.0 and later.
     */
    readonly customAmiId?: pulumi.Input<string>;
    /**
     * Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
     */
    readonly ebsRootVolumeSize?: pulumi.Input<number>;
    /**
     * Attributes for the EC2 instances running the job flow. Defined below
     */
    readonly ec2Attributes?: pulumi.Input<inputs.emr.ClusterEc2Attributes>;
    /**
     * Use the `masterInstanceGroup` configuration block, `coreInstanceGroup` configuration block and `aws.emr.InstanceGroup` resource(s) instead. A list of `instanceGroup` objects for each instance group in the cluster. Exactly one of `masterInstanceType` and `instanceGroup` must be specified. If `instanceGroup` is set, then it must contain a configuration block for at least the `MASTER` instance group type (as well as any additional instance groups). Cannot be specified if `masterInstanceGroup` or `coreInstanceGroup` configuration blocks are set. Defined below
     *
     * @deprecated use `master_instance_group` configuration block, `core_instance_group` configuration block, and `aws_emr_instance_group` resource(s) instead
     */
    readonly instanceGroups?: pulumi.Input<pulumi.Input<inputs.emr.ClusterInstanceGroup>[]>;
    /**
     * Switch on/off run cluster with no steps or when all steps are complete (default is on)
     */
    readonly keepJobFlowAliveWhenNoSteps?: pulumi.Input<boolean>;
    /**
     * Kerberos configuration for the cluster. Defined below
     */
    readonly kerberosAttributes?: pulumi.Input<inputs.emr.ClusterKerberosAttributes>;
    /**
     * S3 bucket to write the log files of the job flow. If a value is not provided, logs are not created
     */
    readonly logUri?: pulumi.Input<string>;
    /**
     * Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [master node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-master). Cannot be specified if `masterInstanceType` argument or `instanceGroup` configuration blocks are set. Detailed below.
     */
    readonly masterInstanceGroup?: pulumi.Input<inputs.emr.ClusterMasterInstanceGroup>;
    /**
     * Use the `masterInstanceGroup` configuration block `instanceType` argument instead. The EC2 instance type of the master node. Cannot be specified if `masterInstanceGroup` or `instanceGroup` configuration blocks are set.
     *
     * @deprecated use `master_instance_group` configuration block `instance_type` argument instead
     */
    readonly masterInstanceType?: pulumi.Input<string>;
    /**
     * The public DNS name of the master EC2 instance.
     * * `core_instance_group.0.id` - Core node type Instance Group ID, if using Instance Group for this node type.
     */
    readonly masterPublicDns?: pulumi.Input<string>;
    /**
     * The name of the step.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The release label for the Amazon EMR release
     */
    readonly releaseLabel?: pulumi.Input<string>;
    /**
     * The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an `instance group` is resized.
     */
    readonly scaleDownBehavior?: pulumi.Input<string>;
    /**
     * The security configuration name to attach to the EMR cluster. Only valid for EMR clusters with `releaseLabel` 4.8.0 or greater
     */
    readonly securityConfiguration?: pulumi.Input<string>;
    /**
     * IAM role that will be assumed by the Amazon EMR service to access AWS resources
     */
    readonly serviceRole?: pulumi.Input<string>;
    /**
     * The number of steps that can be executed concurrently. You can specify a maximum of 256 steps. Only valid for EMR clusters with `releaseLabel` 5.28.0 or greater. (default is 1)
     */
    readonly stepConcurrencyLevel?: pulumi.Input<number>;
    /**
     * List of steps to run when creating the cluster. Defined below. It is highly recommended to utilize [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) if other steps are being managed outside of this provider.
     */
    readonly steps?: pulumi.Input<pulumi.Input<inputs.emr.ClusterStep>[]>;
    /**
     * list of tags to apply to the EMR Cluster
     */
    readonly tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Switch on/off termination protection (default is `false`, except when using multiple master nodes). Before attempting to destroy the resource when termination protection is enabled, this configuration must be applied with its value set to `false`.
     */
    readonly terminationProtection?: pulumi.Input<boolean>;
    /**
     * Whether the job flow is visible to all IAM users of the AWS account associated with the job flow. Default `true`
     */
    readonly visibleToAllUsers?: pulumi.Input<boolean>;
}
/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * A JSON string for selecting additional features such as adding proxy information. Note: Currently there is no API to retrieve the value of this argument after EMR cluster creation from provider, therefore this provider cannot detect drift from the actual EMR cluster if its value is changed outside this provider.
     */
    readonly additionalInfo?: pulumi.Input<string>;
    /**
     * A list of applications for the cluster. Valid values are: `Flink`, `Hadoop`, `Hive`, `Mahout`, `Pig`, `Spark`, and `JupyterHub` (as of EMR 5.14.0). Case insensitive
     */
    readonly applications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An IAM role for automatic scaling policies. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
     */
    readonly autoscalingRole?: pulumi.Input<string>;
    /**
     * Ordered list of bootstrap actions that will be run before Hadoop is started on the cluster nodes. Defined below.
     */
    readonly bootstrapActions?: pulumi.Input<pulumi.Input<inputs.emr.ClusterBootstrapAction>[]>;
    /**
     * List of configurations supplied for the EMR cluster you are creating
     */
    readonly configurations?: pulumi.Input<string>;
    /**
     * A JSON string for supplying list of configurations for the EMR cluster.
     */
    readonly configurationsJson?: pulumi.Input<string>;
    /**
     * Use the `coreInstanceGroup` configuration block `instanceCount` argument instead. Number of Amazon EC2 instances used to execute the job flow. EMR will use one node as the cluster's master node and use the remainder of the nodes (`coreInstanceCount`-1) as core nodes. Cannot be specified if `coreInstanceGroup` or `instanceGroup` configuration blocks are set. Default `1`
     *
     * @deprecated use `core_instance_group` configuration block `instance_count` argument instead
     */
    readonly coreInstanceCount?: pulumi.Input<number>;
    /**
     * Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [core node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-core). Cannot be specified if `coreInstanceCount` argument, `coreInstanceType` argument, or `instanceGroup` configuration blocks are set. Detailed below.
     */
    readonly coreInstanceGroup?: pulumi.Input<inputs.emr.ClusterCoreInstanceGroup>;
    /**
     * Use the `coreInstanceGroup` configuration block `instanceType` argument instead. The EC2 instance type of the slave nodes. Cannot be specified if `coreInstanceGroup` or `instanceGroup` configuration blocks are set.
     *
     * @deprecated use `core_instance_group` configuration block `instance_type` argument instead
     */
    readonly coreInstanceType?: pulumi.Input<string>;
    /**
     * A custom Amazon Linux AMI for the cluster (instead of an EMR-owned AMI). Available in Amazon EMR version 5.7.0 and later.
     */
    readonly customAmiId?: pulumi.Input<string>;
    /**
     * Size in GiB of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
     */
    readonly ebsRootVolumeSize?: pulumi.Input<number>;
    /**
     * Attributes for the EC2 instances running the job flow. Defined below
     */
    readonly ec2Attributes?: pulumi.Input<inputs.emr.ClusterEc2Attributes>;
    /**
     * Use the `masterInstanceGroup` configuration block, `coreInstanceGroup` configuration block and `aws.emr.InstanceGroup` resource(s) instead. A list of `instanceGroup` objects for each instance group in the cluster. Exactly one of `masterInstanceType` and `instanceGroup` must be specified. If `instanceGroup` is set, then it must contain a configuration block for at least the `MASTER` instance group type (as well as any additional instance groups). Cannot be specified if `masterInstanceGroup` or `coreInstanceGroup` configuration blocks are set. Defined below
     *
     * @deprecated use `master_instance_group` configuration block, `core_instance_group` configuration block, and `aws_emr_instance_group` resource(s) instead
     */
    readonly instanceGroups?: pulumi.Input<pulumi.Input<inputs.emr.ClusterInstanceGroup>[]>;
    /**
     * Switch on/off run cluster with no steps or when all steps are complete (default is on)
     */
    readonly keepJobFlowAliveWhenNoSteps?: pulumi.Input<boolean>;
    /**
     * Kerberos configuration for the cluster. Defined below
     */
    readonly kerberosAttributes?: pulumi.Input<inputs.emr.ClusterKerberosAttributes>;
    /**
     * S3 bucket to write the log files of the job flow. If a value is not provided, logs are not created
     */
    readonly logUri?: pulumi.Input<string>;
    /**
     * Configuration block to use an [Instance Group](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for the [master node type](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-master). Cannot be specified if `masterInstanceType` argument or `instanceGroup` configuration blocks are set. Detailed below.
     */
    readonly masterInstanceGroup?: pulumi.Input<inputs.emr.ClusterMasterInstanceGroup>;
    /**
     * Use the `masterInstanceGroup` configuration block `instanceType` argument instead. The EC2 instance type of the master node. Cannot be specified if `masterInstanceGroup` or `instanceGroup` configuration blocks are set.
     *
     * @deprecated use `master_instance_group` configuration block `instance_type` argument instead
     */
    readonly masterInstanceType?: pulumi.Input<string>;
    /**
     * The name of the step.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The release label for the Amazon EMR release
     */
    readonly releaseLabel: pulumi.Input<string>;
    /**
     * The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an `instance group` is resized.
     */
    readonly scaleDownBehavior?: pulumi.Input<string>;
    /**
     * The security configuration name to attach to the EMR cluster. Only valid for EMR clusters with `releaseLabel` 4.8.0 or greater
     */
    readonly securityConfiguration?: pulumi.Input<string>;
    /**
     * IAM role that will be assumed by the Amazon EMR service to access AWS resources
     */
    readonly serviceRole: pulumi.Input<string>;
    /**
     * The number of steps that can be executed concurrently. You can specify a maximum of 256 steps. Only valid for EMR clusters with `releaseLabel` 5.28.0 or greater. (default is 1)
     */
    readonly stepConcurrencyLevel?: pulumi.Input<number>;
    /**
     * List of steps to run when creating the cluster. Defined below. It is highly recommended to utilize [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) if other steps are being managed outside of this provider.
     */
    readonly steps?: pulumi.Input<pulumi.Input<inputs.emr.ClusterStep>[]>;
    /**
     * list of tags to apply to the EMR Cluster
     */
    readonly tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Switch on/off termination protection (default is `false`, except when using multiple master nodes). Before attempting to destroy the resource when termination protection is enabled, this configuration must be applied with its value set to `false`.
     */
    readonly terminationProtection?: pulumi.Input<boolean>;
    /**
     * Whether the job flow is visible to all IAM users of the AWS account associated with the job flow. Default `true`
     */
    readonly visibleToAllUsers?: pulumi.Input<boolean>;
}
