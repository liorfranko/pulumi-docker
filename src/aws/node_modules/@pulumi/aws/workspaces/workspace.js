"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a workspace in [AWS Workspaces](https://docs.aws.amazon.com/workspaces/latest/adminguide/amazon-workspaces.html) Service
 *
 * > **NOTE:** During deletion of an `aws.workspaces.Workspace` resource, the service role `workspaces_DefaultRole` must be attached to the
 * policy `arn:aws:iam::aws:policy/AmazonWorkSpacesServiceAccess`, or it will leak the ENI that the Workspaces service creates for the Workspace.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const main = pulumi.output(aws.WorkspacesDirectory({
 *     directoryId: "d-ten5h0y19",
 * }, { async: true }));
 * const valueWindows10 = pulumi.output(aws.workspaces.getBundle({
 *     bundleId: "wsb-bh8rsxt14", // Value with Windows 10 (English)
 * }, { async: true }));
 * const jhon_doe = new aws.workspaces.Workspace("jhon.doe", {
 *     bundleId: valueWindows10.id,
 *     directoryId: main.id,
 *     rootVolumeEncryptionEnabled: true,
 *     tags: {
 *         Department: "IT",
 *     },
 *     userName: "jhon.doe",
 *     userVolumeEncryptionEnabled: true,
 *     volumeEncryptionKey: "alias/aws/workspaces",
 *     workspaceProperties: {
 *         computeTypeName: "VALUE",
 *         rootVolumeSizeGib: 80,
 *         runningMode: "AUTO_STOP",
 *         runningModeAutoStopTimeoutInMinutes: 60,
 *         userVolumeSizeGib: 10,
 *     },
 * });
 * ```
 */
class Workspace extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["bundleId"] = state ? state.bundleId : undefined;
            inputs["computerName"] = state ? state.computerName : undefined;
            inputs["directoryId"] = state ? state.directoryId : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["rootVolumeEncryptionEnabled"] = state ? state.rootVolumeEncryptionEnabled : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["userName"] = state ? state.userName : undefined;
            inputs["userVolumeEncryptionEnabled"] = state ? state.userVolumeEncryptionEnabled : undefined;
            inputs["volumeEncryptionKey"] = state ? state.volumeEncryptionKey : undefined;
            inputs["workspaceProperties"] = state ? state.workspaceProperties : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.bundleId === undefined) {
                throw new Error("Missing required property 'bundleId'");
            }
            if (!args || args.directoryId === undefined) {
                throw new Error("Missing required property 'directoryId'");
            }
            if (!args || args.userName === undefined) {
                throw new Error("Missing required property 'userName'");
            }
            inputs["bundleId"] = args ? args.bundleId : undefined;
            inputs["directoryId"] = args ? args.directoryId : undefined;
            inputs["rootVolumeEncryptionEnabled"] = args ? args.rootVolumeEncryptionEnabled : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["userName"] = args ? args.userName : undefined;
            inputs["userVolumeEncryptionEnabled"] = args ? args.userVolumeEncryptionEnabled : undefined;
            inputs["volumeEncryptionKey"] = args ? args.volumeEncryptionKey : undefined;
            inputs["workspaceProperties"] = args ? args.workspaceProperties : undefined;
            inputs["computerName"] = undefined /*out*/;
            inputs["ipAddress"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Workspace.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Workspace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Workspace(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Workspace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workspace.__pulumiType;
    }
}
exports.Workspace = Workspace;
/** @internal */
Workspace.__pulumiType = 'aws:workspaces/workspace:Workspace';
//# sourceMappingURL=workspace.js.map