"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a directory registration in AWS WorkSpaces Service
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const mainVpc = new aws.ec2.Vpc("main", {
 *     cidrBlock: "10.0.0.0/16",
 * });
 * const private_a = new aws.ec2.Subnet("private-a", {
 *     availabilityZone: "us-east-1a",
 *     cidrBlock: "10.0.0.0/24",
 *     vpcId: mainVpc.id,
 * });
 * const private_b = new aws.ec2.Subnet("private-b", {
 *     availabilityZone: "us-east-1b",
 *     cidrBlock: "10.0.1.0/24",
 *     vpcId: mainVpc.id,
 * });
 * const mainDirectory = new aws.directoryservice.Directory("main", {
 *     password: "#S1ncerely",
 *     size: "Small",
 *     vpcSettings: {
 *         subnetIds: [
 *             private_a.id,
 *             private_b.id,
 *         ],
 *         vpcId: mainVpc.id,
 *     },
 * });
 * const mainWorkspacesDirectory = new aws.workspaces.Directory("main", {
 *     directoryId: mainDirectory.id,
 *     selfServicePermissions: {
 *         increaseVolumeSize: true,
 *         rebuildWorkspace: true,
 *     },
 * });
 * ```
 */
class Directory extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["alias"] = state ? state.alias : undefined;
            inputs["customerUserName"] = state ? state.customerUserName : undefined;
            inputs["directoryId"] = state ? state.directoryId : undefined;
            inputs["directoryName"] = state ? state.directoryName : undefined;
            inputs["directoryType"] = state ? state.directoryType : undefined;
            inputs["dnsIpAddresses"] = state ? state.dnsIpAddresses : undefined;
            inputs["iamRoleId"] = state ? state.iamRoleId : undefined;
            inputs["ipGroupIds"] = state ? state.ipGroupIds : undefined;
            inputs["registrationCode"] = state ? state.registrationCode : undefined;
            inputs["selfServicePermissions"] = state ? state.selfServicePermissions : undefined;
            inputs["subnetIds"] = state ? state.subnetIds : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["workspaceSecurityGroupId"] = state ? state.workspaceSecurityGroupId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.directoryId === undefined) {
                throw new Error("Missing required property 'directoryId'");
            }
            inputs["directoryId"] = args ? args.directoryId : undefined;
            inputs["selfServicePermissions"] = args ? args.selfServicePermissions : undefined;
            inputs["subnetIds"] = args ? args.subnetIds : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["alias"] = undefined /*out*/;
            inputs["customerUserName"] = undefined /*out*/;
            inputs["directoryName"] = undefined /*out*/;
            inputs["directoryType"] = undefined /*out*/;
            inputs["dnsIpAddresses"] = undefined /*out*/;
            inputs["iamRoleId"] = undefined /*out*/;
            inputs["ipGroupIds"] = undefined /*out*/;
            inputs["registrationCode"] = undefined /*out*/;
            inputs["workspaceSecurityGroupId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Directory.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Directory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Directory(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Directory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Directory.__pulumiType;
    }
}
exports.Directory = Directory;
/** @internal */
Directory.__pulumiType = 'aws:workspaces/directory:Directory';
//# sourceMappingURL=directory.js.map