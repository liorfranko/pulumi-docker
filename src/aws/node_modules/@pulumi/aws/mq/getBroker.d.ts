import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Provides information about a MQ Broker.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const brokerId = config.get("brokerId") || "";
 * const brokerName = config.get("brokerName") || "";
 *
 * const byId = pulumi.output(aws.mq.getBroker({
 *     brokerId: brokerId,
 * }, { async: true }));
 * const byName = pulumi.output(aws.mq.getBroker({
 *     brokerName: brokerName,
 * }, { async: true }));
 * ```
 */
export declare function getBroker(args?: GetBrokerArgs, opts?: pulumi.InvokeOptions): Promise<GetBrokerResult>;
/**
 * A collection of arguments for invoking getBroker.
 */
export interface GetBrokerArgs {
    /**
     * The unique id of the mq broker.
     */
    readonly brokerId?: string;
    /**
     * The unique name of the mq broker.
     */
    readonly brokerName?: string;
    readonly logs?: inputs.mq.GetBrokerLogs;
    readonly tags?: {
        [key: string]: string;
    };
}
/**
 * A collection of values returned by getBroker.
 */
export interface GetBrokerResult {
    readonly arn: string;
    readonly autoMinorVersionUpgrade: boolean;
    readonly brokerId: string;
    readonly brokerName: string;
    readonly configuration: outputs.mq.GetBrokerConfiguration;
    readonly deploymentMode: string;
    readonly encryptionOptions: outputs.mq.GetBrokerEncryptionOption[];
    readonly engineType: string;
    readonly engineVersion: string;
    readonly hostInstanceType: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instances: outputs.mq.GetBrokerInstance[];
    readonly logs?: outputs.mq.GetBrokerLogs;
    readonly maintenanceWindowStartTime: outputs.mq.GetBrokerMaintenanceWindowStartTime;
    readonly publiclyAccessible: boolean;
    readonly securityGroups: string[];
    readonly subnetIds: string[];
    readonly tags: {
        [key: string]: string;
    };
    readonly users: outputs.mq.GetBrokerUser[];
}
